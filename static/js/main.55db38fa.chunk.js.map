{"version":3,"sources":["redux/actions/actionTypes.jsx","redux/reducers/Authentication/authentication.js","redux/reducers/PhoneNumGen/phoneNumGen.js","redux/reducers/rootReducers.js","redux/store/index.js","components/login/loginCom.jsx","redux/actions/login/loginActions.jsx","components/login/index.jsx","components/signUp/signUpCom.jsx","components/signUp/index.jsx","redux/actions/signUp/signUpActions.js","utilities/phoneNumberGen.js","components/dashBoard/tableDash.jsx","components/dashBoard/index.jsx","redux/actions/phoneNumberGen/numGeneratorActions.js","App.jsx","serviceWorker.js","index.jsx"],"names":["SIGNUP","LOGIN","CLEARDATA","initialState","registered","currentUser","generatedNumbers","combineReducers","userData","state","action","type","user","payload","generatedNumber","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","rootReducer","configureStore","middleware","logger","thunk","store","createStore","composeWithDevTools","applyMiddleware","persistor","persistStore","LoginFormPage","handleInput","handleLogin","className","md","onSubmit","label","icon","name","group","validate","error","success","onChange","color","loginAction","data","username","password","dispatch","Login","userName","event","target","value","setState","preventDefault","handleValidation","props","users","prevProps","this","history","push","class","onClick","Component","connect","SignUpFormPage","handleSignUp","Signup","length","signUpAction","phoneNumberGen","phoneNumber","Set","Math","floor","random","count","existingCount","size","newCount","parseInt","i","add","generatePhoneNumber","availableCount","generate","TablePage","phoneNumbers","rowItems","row","id","phone_number","columns","field","sort","rows","scrollY","Dashboard","max","min","genNumbers","handleSort","asscgenNumbers","a","b","handleLogout","phoneNumberGenAction","handleGenerate","currentTotal","nums","newNumberCount","numberCount","numbersLeft","Fragment","fluid","background","disabled","filename","App","loading","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55db38fa.chunk.js","sourcesContent":["export const SIGNUP = 'sign up a user';\nexport const LOGIN = 'login a user';\nexport const NUMBER_GENERATOR = 'generate phone numbers';\nexport const CLEARDATA = 'clear generated phone numbers';\n","import { SIGNUP, LOGIN, CLEARDATA } from '../../actions/actionTypes';\n\nconst initialState = {\n  registered: {},\n  currentUser: {},\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SIGNUP: {\n      const user = action.payload;\n      return {\n        ...state,\n        registered: {\n          ...state.registered,\n          ...user,\n        },\n      };\n    }\n    case LOGIN: {\n      const user = action.payload;\n      return {\n        ...state,\n        currentUser: {\n          ...user,\n        },\n      };\n    }\n    case CLEARDATA: {\n      return {\n        ...state,\n        currentUser: {\n        },\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { NUMBER_GENERATOR, CLEARDATA } from '../../actions/actionTypes';\n\nconst initialState = {\n  generatedNumbers: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case NUMBER_GENERATOR: {\n      return {\n        ...state,\n        generatedNumbers: [\n          ...state.generatedNumbers,\n          ...action.payload,\n        ],\n      };\n    }\n    case CLEARDATA: {\n      return {\n        ...state,\n        generatedNumbers: [\n        ],\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport registeredUser from './Authentication/authentication';\nimport generatedNumber from './PhoneNumGen/phoneNumGen';\n\nexport default combineReducers({\n  userData: registeredUser,\n  generatedNumber,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport rootReducer from '../reducers/rootReducers';\n\nconst initialState = {};\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  blacklist: ['generatedNumber'],\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst configureStore = () => {\n  const middleware = [logger, thunk];\n  const store = createStore(\n    persistedReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware)),\n  );\n  const persistor = persistStore(store);\n  return { persistor, store };\n};\n\nexport default configureStore;\n","import React from 'react';\nimport {\n  MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput,\n} from 'mdbreact';\n\nconst LoginFormPage = ({ handleInput, handleLogin }) => (\n  <MDBContainer className=\"signUpCard\">\n    <MDBRow className=\"signUpRow\">\n      <MDBCol md=\"6\" className=\"signUpCol6\">\n        <form onSubmit={handleLogin}>\n          <p className=\"h5 text-center mb-4\">LOGIN</p>\n          <div className=\"grey-text white-text\">\n            <MDBInput\n              className=\"whiteLabel\"\n              label=\"Your name\"\n              icon=\"user\"\n              name=\"userName\"\n              group\n              type=\"text\"\n              validate\n              error=\"wrong\"\n              success=\"right\"\n              onChange={handleInput}\n            />\n            <MDBInput\n              label=\"Your password\"\n              name=\"password\"\n              icon=\"lock\"\n              group\n              type=\"password\"\n              validate\n              onChange={handleInput}\n            />\n          </div>\n          <div className=\"text-center\">\n            <MDBBtn\n              type=\"submit\"\n              color=\"elegant\"\n            >\n              Login\n            </MDBBtn>\n          </div>\n        </form>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n);\n\nexport default LoginFormPage;\n","/* eslint-disable import/prefer-default-export */\nimport { LOGIN, CLEARDATA } from '../actionTypes';\n\nconst login = response => ({\n  type: LOGIN,\n  payload: response,\n});\n\nconst clearCurrentUser = () => ({\n  type: CLEARDATA,\n});\n\nexport const loginAction = (data, username, password) => (dispatch) => {\n  if (data === 'clear') {\n    dispatch(clearCurrentUser());\n  } else {\n    const newUser = {\n      [username]: password,\n    };\n    dispatch(login(newUser));\n  }\n};\n","/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable class-methods-use-this */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport LoginFormPage from './loginCom';\nimport { loginAction } from '../../redux/actions/login/loginActions';\nimport { MDBBtn } from 'mdbreact';\n\nclass Login extends Component {\n  state = {\n    userName: '',\n    password: '',\n  };\n\n  handleInput = (event) => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleLogin = (event) => {\n    /* istanbul ignore next */\n    event.preventDefault();\n    /* istanbul ignore next */\n    const { userName, password } = this.state;\n    /* istanbul ignore next */\n    this.handleValidation(userName, password)\n  }\n\n  componentDidUpdate(prevProps) {\n    /* istanbul ignore next */\n    const { currentUser } = this.props.users;\n    /* istanbul ignore next */\n    if (currentUser !== prevProps.users.currentUser) {\n      this.props.history.push('/Dashboard');\n      return;\n    }\n  }\n\n  handleValidation = (userName, password) => {\n    /* istanbul ignore next */\n    const { registered } = this.props.users;\n    /* istanbul ignore next */\n    if (registered[userName] === password) {\n      this.props.loginAction(null, userName, password);\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"baserow\">\n          <div className=\"whites\">\n          <h1 class=\"display-1\">Phone Number Generator</h1>\n            <MDBBtn\n                color=\"white\"\n                className=\"downloadButton Login btn-black\"\n                onClick={() => this.props.history.push('/')}>\n                SIGN-UP\n            </MDBBtn>\n          </div>\n          <div className=\"blacks\">\n            <LoginFormPage handleInput={this.handleInput} handleLogin={this.handleLogin}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  users: state.userData,\n});\n\nexport default connect(mapStateToProps, { loginAction })(Login);\n","import React from 'react';\nimport {\n  MDBContainer, MDBRow, MDBCol, MDBBtn, MDBInput,\n} from 'mdbreact';\n\nconst SignUpFormPage = ({ handleInput, handleSignUp }) => (\n  <MDBContainer className=\"signUpCard\">\n    <MDBRow className=\"signUpRow\">\n      <MDBCol md=\"6\" className=\"signUpCol6\">\n        <form onSubmit={handleSignUp}>\n          <p className=\"h5 text-center mb-4\">Sign up</p>\n          <div className=\"grey-text white-text\">\n            <MDBInput\n              className=\"whiteLabel\"\n              label=\"Your name\"\n              icon=\"user\"\n              name=\"userName\"\n              group\n              type=\"text\"\n              validate\n              error=\"wrong\"\n              success=\"right\"\n              onChange={handleInput}\n            />\n            <MDBInput\n              label=\"Your password\"\n              name=\"password\"\n              icon=\"lock\"\n              group\n              type=\"password\"\n              validate\n              onChange={handleInput}\n            />\n          </div>\n          <div className=\"text-center\">\n            <MDBBtn\n              type=\"submit\"\n              color=\"elegant\"\n            >\n              Register\n            </MDBBtn>\n          </div>\n        </form>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n);\n\nexport default SignUpFormPage;\n","/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable class-methods-use-this */\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SignUpFormPage from './signUpCom';\nimport { signUpAction } from '../../redux/actions/signUp/signUpActions';\nimport { MDBBtn } from 'mdbreact';\n\nclass Signup extends Component {\n  state = {\n    userName: '',\n    password: '',\n  };\n\n  handleInput = (event) => {\n    /* istanbul ignore next */\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSignUp = (event) => {\n    /* istanbul ignore next */\n    event.preventDefault();\n    /* istanbul ignore next */\n    const { userName, password } = this.state;\n    /* istanbul ignore next */\n    if (userName.length >= 3 && password.length >= 3) {\n      this.props.signUpAction(userName, password);\n    } else {\n      return;\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { registered } = this.props.users;\n    /* istanbul ignore next */\n    if (registered !== prevProps.users.registered) {\n      this.props.history.push('/login');\n      return;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"baserow\">\n          <div className=\"whites\">\n            <h1 class=\"display-1\">Phone Number Generator</h1>\n            <MDBBtn\n                color=\"white\"\n                className=\"downloadButton Login btn-black\"\n                /* istanbul ignore next */\n                onClick={() => this.props.history.push('/login')}>\n                LOGIN\n            </MDBBtn>\n          </div>\n          <div className=\"blacks\">\n            <SignUpFormPage handleInput={this.handleInput} handleSignUp={this.handleSignUp}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  users: state.userData,\n});\n\nexport default connect(mapStateToProps, { signUpAction })(Signup);\n","/* eslint-disable import/prefer-default-export */\nimport { SIGNUP } from '../actionTypes';\n\nconst signUp = response => ({\n  type: SIGNUP,\n  payload: response,\n});\n\nconst signUpAction = (username, password) => (dispatch) => {\n  const newUser = {\n    [username]: password,\n  };\n  dispatch(signUp(newUser));\n};\n\n\nexport { signUpAction };\n","/* eslint-disable radix */\n/* eslint-disable no-plusplus */\n/* eslint-disable class-methods-use-this */\nclass phoneNumberGen {\n  constructor() {\n    this.phoneNumber = new Set();\n  }\n\n  generatePhoneNumber() {\n    // eslint-disable-next-line prefer-template\n    return '0' + Math.floor(Math.random() * 900000000 + 100000000);\n  }\n\n  generate(count) {\n    const existingCount = this.phoneNumber.size;\n    const newCount = parseInt(count) + parseInt(existingCount);\n    for (let i = 0; i < count; i++) {\n      this.phoneNumber.add(this.generatePhoneNumber());\n    }\n    const availableCount = this.phoneNumber.size;\n    if (availableCount < newCount) {\n      this.generate(newCount - availableCount);\n    }\n    return this.phoneNumber;\n  }\n}\n\nexport default phoneNumberGen;\n","/* eslint-disable no-plusplus */\nimport React from 'react';\nimport { MDBTable, MDBTableBody, MDBTableHead } from 'mdbreact';\n\nconst TablePage = (phoneNumbers) => {\n  const rowItems = [];\n\n  /* istanbul ignore next */\n  for (let i = 0; i < phoneNumbers.phoneNumbers.length; i++) {\n    /* istanbul ignore next */\n    const a = i + 1;\n    const row = {\n      id: a,\n      phone_number: phoneNumbers.phoneNumbers[i],\n    };\n    rowItems.push(row);\n  }\n  const data = {\n    columns: [\n      {\n        label: 'Number',\n        field: 'number',\n        sort: 'asc',\n      },\n      {\n        label: 'Phone Number',\n        field: 'phone_number',\n        sort: 'asc',\n      },\n    ],\n    rows: rowItems,\n  };\n  return (\n    <MDBTable scrollY>\n      <MDBTableHead columns={data.columns} />\n      <MDBTableBody rows={data.rows} />\n    </MDBTable>\n  );\n};\n\nexport default TablePage;\n","/* eslint-disable react/prefer-stateless-function */\nimport React, { Component } from 'react';\n// import { connect } from 'react-redux';\nimport {\n  MDBContainer, MDBRow, MDBCol, MDBInput, MDBBtn,\n} from 'mdbreact';\nimport phoneNumberGen from '../../utilities/phoneNumberGen';\nimport { loginAction } from '../../redux/actions/login/loginActions';\nimport { phoneNumberGenAction } from '../../redux/actions/phoneNumberGen/numGeneratorActions';\nimport { connect } from 'react-redux';\nimport { CSVLink } from 'react-csv';\nimport TablePage from './tableDash';\n\nexport class Dashboard extends Component {\n  state = {\n    count: '',\n    max: 0,\n    min: 0,\n    genNumbers: [],\n  }\n\n  componentDidUpdate(prevProps) {\n    const { generatedNumbers } = this.props.generatedNumbers;\n    /* istanbul ignore next */\n    if (generatedNumbers !== prevProps.generatedNumbers.generatedNumbers) {\n      const newNumberCount = generatedNumbers.length - prevProps.generatedNumbers.generatedNumbers.length\n      this.setState({\n        genNumbers: generatedNumbers,\n        numberCount: newNumberCount,\n        max: Math.max(...generatedNumbers),\n        min: Math.min(...generatedNumbers),\n      });\n    }\n  }\n\n  componentDidMount() {\n    /* istanbul ignore next */\n    const { generatedNumbers } = this.props.generatedNumbers;\n    this.setState({genNumbers: generatedNumbers});\n  }\n  handleSort = (event) => {\n    /* istanbul ignore next */\n    event.preventDefault();\n    /* istanbul ignore next */\n    const { value } = event.target;\n    /* istanbul ignore next */\n    const { genNumbers } = this.state;\n    /* istanbul ignore next */\n    if (value === '1') {\n      const asscgenNumbers = genNumbers.sort((a, b) => 0 - (a > b ? -1 : 1))\n      this.setState({genNumbers: asscgenNumbers})\n    } \n    /* istanbul ignore next */\n    else if (value === '2') {\n      const asscgenNumbers = genNumbers.sort((a, b) => 0 - (a > b ? 1 : -1))\n      this.setState({genNumbers: asscgenNumbers})\n    } else {\n      return;\n    }\n  };\n\n  handleLogout = () => {\n    /* istanbul ignore next */\n    this.props.phoneNumberGenAction('clear');\n    /* istanbul ignore next */\n    this.props.loginAction('clear', null, null);\n    /* istanbul ignore next */\n    this.props.history.push('/login');\n  }\n\n  handleInput = (event) => {\n    /* istanbul ignore next */\n    const { name, value } = event.target;\n    /* istanbul ignore next */\n    this.setState({ [name]: value });\n  };\n\n  handleGenerate = async () => {\n    const phoneNumbers = new phoneNumberGen();\n    const { count, genNumbers } = this.state;\n    const currentTotal = parseInt(count) + genNumbers.length;\n    /* istanbul ignore next */\n    if (count.length > 0 && currentTotal <= 10000) {\n      const nums = await phoneNumbers.generate(count);\n      this.props.phoneNumberGenAction(nums);\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    const { genNumbers, max, min } = this.state;\n    const numbersLeft = 10000 - genNumbers.length\n    return (\n      <React.Fragment>\n        <MDBContainer fluid>\n          <MDBRow>\n            <MDBCol md=\"3\" className=\"blackDashboard\">\n              <MDBRow className=\"phoneNumberGenerator\">\n                <MDBCol md=\"12\">\n                  <MDBInput\n                  label={`You have ${numbersLeft} more numbers`}\n                  background size=\"lg\"\n                  name=\"count\"\n                  onChange={this.handleInput}\n                  />\n                  {genNumbers.length > 10000 ? \n                  <MDBBtn\n                  onClick={this.handleGenerate}\n                  disabled\n                  color=\"white\">\n                  Generate Phone Numbers\n                  </MDBBtn>\n                  :\n                  <MDBBtn\n                  onClick={this.handleGenerate}\n                  color=\"white\">\n                  Generate Phone Numbers\n                  </MDBBtn>\n                  }\n                </MDBCol>\n              </MDBRow>\n              <MDBRow className=\"sortField\">\n                <select onChange={this.handleSort} className=\"browser-default custom-select sortSelect\">\n                  <option>Choose Your Sort Option</option>\n                  <option value=\"1\">Ascending</option>\n                  <option value=\"2\">Descending</option>\n                </select>\n              </MDBRow>\n              <MDBRow className=\"sortField\">\n              {genNumbers.length > 0 ? \n                <MDBBtn color=\"white\" className=\"downloadButton\">\n                <CSVLink data={[genNumbers]} filename={'my-phone-file.csv'}>\n                  Download Phone Numbers\n                </CSVLink>\n                </MDBBtn> \n                : \n                <MDBBtn color=\"white\" className=\"downloadButton\" disabled>\n                <CSVLink data={[genNumbers]} filename={'my-phone-file.csv'}>\n                  Download Phone Numbers\n                </CSVLink>\n                </MDBBtn>}\n              </MDBRow>\n              <MDBRow className=\"sortField\">\n                <MDBBtn\n                color=\"white\"\n                className=\"downloadButton\"\n                onClick={this.handleLogout}>\n                LOGOUT\n                </MDBBtn>\n              </MDBRow>\n            </MDBCol>\n            <MDBCol md=\"9\" className=\"whiteDashboard\">\n              <span className=\"nums\">Max Number: {max}</span>\n              <span className=\"nums\">Min Number: {min}</span>\n              <TablePage phoneNumbers={genNumbers} />\n            </MDBCol>\n          </MDBRow>\n        </MDBContainer>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  generatedNumbers: state.generatedNumber,\n});\n\nexport default connect(mapStateToProps, { phoneNumberGenAction, loginAction })(Dashboard);\n","/* eslint-disable import/prefer-default-export */\nimport { NUMBER_GENERATOR, CLEARDATA } from '../actionTypes';\n\nconst generatePhoneNumbers = response => ({\n  type: NUMBER_GENERATOR,\n  payload: response,\n});\nconst clearPhoneNumbers = () => ({\n  type: CLEARDATA,\n});\n\nexport const phoneNumberGenAction = data => (dispatch) => {\n  if (data === 'clear') {\n    dispatch(clearPhoneNumbers());\n  } else {\n    dispatch(generatePhoneNumbers(data));\n  }\n};\n","/* eslint-disable import/no-named-as-default-member */\n/* eslint-disable import/no-named-as-default */\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport configureStore from './redux/store';\nimport './App.css';\nimport Login from './components/login';\nimport Signup from './components/signUp';\nimport Dashboard from './components/dashBoard';\n\nconst App = () => {\n  const { persistor, store } = configureStore();\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <PersistGate loading={null} persistor={persistor}>\n          <div className=\"App\">\n            <Switch>\n              <Route exact path=\"/\" component={Signup} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/dashboard\" component={Dashboard} />\n            </Switch>\n          </div>\n        </PersistGate>\n      </BrowserRouter>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}